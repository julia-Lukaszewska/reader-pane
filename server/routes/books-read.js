//==================================================================
// books-read.js â€“ Routes for reading and fetching books from DB //#PL: ðŸ“˜ books-read.js â€“ trasy do pobierania ksiÄ…Å¼ek z bazy danych #/
//==================================================================

import express from 'express' //#PL: ðŸ”¹ Express do obsÅ‚ugi tras backendowych #/
import Book from '../models/Book.js' //#PL: ðŸ”¹ Model ksiÄ…Å¼ki z MongoDB #/

const router = express.Router() //#PL: ðŸ”¹ Mini-serwer do obsÅ‚ugi tras (GET, POST, itd.) #/

//------------------------------------------------------------------
//------ Get all books from DB //#PL: ðŸ“š Pobierz wszystkie ksiÄ…Å¼ki z bazy danych #/
//------------------------------------------------------------------

router.get('/', async (req, res) => {
  try {
    const books = await Book.find().sort({ addedAt: -1 })  
    res.status(200).json(books) // Return all books (HTTP 200 â€“ OK)  
  } catch (err) {
    console.error(err)
    res.status(500).json({ error: 'Error while fetching books' }) // Error handling  
  }
})

//------------------------------------------------------------------
//------ Get single book by ID //#PL: ðŸ“– Pobierz pojedynczÄ… ksiÄ…Å¼kÄ™ po ID #/
//------------------------------------------------------------------

router.get('/:id', async (req, res) => {
  try {
    const book = await Book.findById(req.params.id)  
    if (!book) {
      return res.status(404).json({ error: 'Book not found' })  
    }
    res.status(200).json(book) // Return the book (HTTP 200 â€“ OK)  
  } catch (err) {
    console.error(err)
    res.status(500).json({ error: 'Error while fetching book' }) // Error handling  
  }
})

export default router //#PL: ðŸ“¤ Eksport routera #/
